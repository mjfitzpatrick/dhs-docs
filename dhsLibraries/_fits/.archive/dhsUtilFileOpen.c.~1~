/*******************************************************************************
 *
 * __doc__ \subsection {dhsUtilSendPixelData}
 * __doc__ \begin{description}
 * __doc__  \item[\sc use:] \emph{void dhsUtilSendPixelData(long $\star$istat, char $\star$resp, dhsHandle dhsID, void $\star$pxlAddr, size\_t pxlSize, fpConfig\_t $\star$cfg, double $\star$expID, char $\star$obsetID);}
 * __doc__  \item[\sc description:] send pixel data to the DHS.
 * __doc__  \item[\sc argument(s):]
 * __doc__   \begin{description}
 * __doc__    \item[\ ] \ 
 * __doc__    \item[\emph{long $\star$istat}] the inherited status value.
 * __doc__    \item[\emph{char $\star$resp}] a user supplied buffer for message strings.
 * __doc__   \item[\emph{dhsHandle dhsID}] dhs handle.
 * __doc__   \item[\emph{void $\star$pxlAddr}] address of data block.
 * __doc__   \item[\emph{size\_t $\star$pxlSize}] size of data block.
 * __doc__   \item[\emph{fpConfig\_t $\star$cfg}] pixel data configuration.
 * __doc__   \item[\emph{double $\star$expID}] exposure identifier.
 * __doc__   \item[\emph{char $\star$obsetID}] observation set identifier.
 * __doc__   \end{description}
 * __doc__  \item[\sc return(s):] void.
 * __doc__  \item[\sc author(s):] Peter Ruckle, Phil Daly
 * __doc__  \item[\sc last modified:] 
 * __doc__  \item[\sc license:] (c) 2004 AURA Inc. All rights reserved. Released under the GPL.
 * __doc__ \end{description}
 *
 ******************************************************************************/

/*******************************************************************************
 * include(s):
 *******************************************************************************/
#if !defined(_dhsUtil_H_)
 #include "dhsUtil.h"
#endif
#if !defined(_dhsImpl_H_)
 #include "dhsImplementationSpecifics.h"
#endif 
#if !defined(_FITSIO_H)
 #include "fitsio.h"
#endif
extern int procDebug;
/*******************************************************************************
 * dhsUtilFileOpen ( ... )
 *******************************************************************************/ 
void dhsUtilFileOpen( long *istat,     /* inherited status               */
		      char *resp,      /* response message               */
		      double *expID    /* exposure identifier            */
    ) 
{
    /* declare some variable and initialize them */
    int fs=0;
    fitsfile *fd = (fitsfile *)NULL;
    char *fitsDir = (char *) NULL;
    char fitsFile[DHS_MAXSTR] = {'\0'};
    char tFName[DHS_MAXSTR] = {'\0'};
    struct stat sts;

    (void) memset((void *)&sts,0,sizeof(struct stat));
    (void) memset((void *)&fitsFile[0],'\0',DHS_MAXSTR);
    switch (dhsUtilFLAG)
    {
      case 1:
	  fitsDir = ( (fitsDir=getenv("MONSOON_DATA")) == (char *) NULL ? (char *) "./"  : fitsDir );
	  if (fitsDir[strlen(fitsDir)-1] == '/') fitsDir[strlen(fitsDir)-1] ='\000';
	  (void) strncpy(dhsUtilDIR, fitsDir, DHS_MAXSTR); dhsUtilFLAG=3; 
	  (void) sprintf(tFName,"%s/%s",fitsDir,dhsUtilFILENAME);
	  break;
      case 2:
	  (void) sprintf(tFName,"%s/%f",dhsUtilDIR,*expID);
	  break; 
      case 3:
	  (void) sprintf(tFName,"%s/%s",dhsUtilDIR,dhsUtilFILENAME);
	  break;
      case 0: default:
      {
	  fitsDir = ( (fitsDir=getenv("MONSOON_DATA")) == (char *) NULL ? (char *) "./"  : fitsDir );
	  if (fitsDir[strlen(fitsDir)-1] == '/') fitsDir[strlen(fitsDir)-1] ='\000';
	
	  (void) sprintf(tFName,"%s/%f",fitsDir,*expID);
      }
    }

    DPRINTF(10, procDebug, "dhsSendMetaData: fitsDir=>%s<\n", dhsUtilDIR);
    DPRINTF(10, procDebug, "dhsSendMetaData: fileName=>%s<\n", dhsUtilFILENAME);
    DPRINTF(10, procDebug, "dhsSendMetaData: tFName=>%s<\n", tFName);



}
