

      dhsSysOpen (long *status, char *response, int numNodes)
     dhsSysClose (long *status, char *response, dhsHandle dhsID


  dhsOpenConnect (long *status, char *response, dhsHandle *dhsID,
                    unsigned long whoAmI, struct fpConfig *pxlConfig)
 dhsCloseConnect (long *status, char *response, dhsHandle dhsID)

      dhsOpenExp (long *status, char *response, dhsHandle *dhsID,
            	    struct fpConfig *pxlConfig, double *expID, char *obsSetID)
     dhsCloseExp (long *status, char *response, dhsHandle dhsID, double expID)

dhsSendPixelData (long *status, char *response, dhsHandle dhsID, 
                  void *pxlAddr, size_t blkSize, struct fpConfig *pxlDescr,
                  double *expID, char *obsSetID)

 dhsSendMetaData (long *status, char *response, dhsHandle dhsID,
                      void *blkAddr, size_t blkSize, struct mdConfig *mdDescr,
                      double *expID, char *obsSetID)

        dhsIOCtl (long *status, char *response, dhsHandle dhsID,
		     ulong ioCtlFunc, char *ObsID, double *expID, ...)



Low-Level Private Procedures


      dcaInitChannel  (dhsID, type)
          dcaConnect  (dhsID, devstr)

      dcaOpenChannel  (chan)
  dcaValidateChannel  (chan)
     dcaCloseChannel  (chan)

	      dcaSet  (dhsID, option, value)
      value = dcaGet  (dhsID, option)

     msg = dcaFmtMsg  (msgtype, whoami, addr, size)
          dcaSendMsg  (dhsID, msg)
	  dcaReadMsg  (dhsID, client_data)

	     dcaSend  (dhsID, buf, size)
	     dcaRecv  (dhsID, buf, size)


Utility Procedures/Macros:

  	 fd = DCS_FD (dhsID)		DCS => Data Capture Supervisor
         fd = DCC_FD (dhsID)		DCC => Data Capture Collector



-------------------------------------------------------------------------------
PseudoCode:
-------------------------------------------------------------------------------

dhsSysOpen (long *status, char *response, dhsHandle *dhsID, ulong whoami) {
    ...std status/param/input checks

    allocate and initialize DHS client code

    /* Initialize a channel to the DHS Supervisor */
    if (dcaInitChannel (dhsID, DHS_SUPERVISOR) == ERR)
	set error return, can't connect to super

    format a SYS_OPEN message
    send it to the supervisor

    request state parameters from supervisor
    read result and update structure

    ...std return
}


dhsOpenConnect (long *status, char *response, dhsHandle *dhsID,
                    unsigned long whoAmI, struct fpConfig *pxlConfig)
{
    ...std status/param/input checks

    /* Validate the connection to supervisor
     */
    if (dcaValidateChannel (dhsID->super) == ERR)
	set error return, can't write to super

    format a SET_FOCAL_PLANE message
    send pxlConfig to the supervisor

    /* Loop MAXTRY times until we get a valid collector connection */
    for (failcount=0; failcount < MAXTRYS; failcount++) {
        format a REQ_COLLECTOR message, or'd w/ failcount for super
        send it to the supervisor
        if (dcaReadMsg (dhsID->super, &device) == ERR)
	    set error return, can't read from super

        if (dcaConnect (device) == OK) {
    	    format an INIT_COLLECTOR message
    	    if (send it to the collector == OK) {
    		...std return (OK)
	    } else {
        	format a COLLECTOR_FAILED message
        	send it to the supervisor
	    }
	}
    }

    ...std return (ERR, "no collector")
}


dhsOpenExp (long *status, char *response, dhsHandle *dhsID,
            	    struct fpConfig *pxlConfig, double *expID, char *obsSetID)
{
    ...std status/param/input checks

    /* Validate the connection to supervisor
     */
    if (dcaValidateChannel (dhsID->super) == ERR)
	set error return, can't write to super


    format a SET_FPCONFIG message
    send mdConfig to the supervisor

    format a SET_EXPID message
    send expID to the supervisor

    format a SET_OBSSETID message
    send obsSetID to the supervisor

    format a OPEN_EXP message
    send it to the supervisor

    ...std return
}


dhsSendPixelData (long *status, char *response, dhsHandle dhsID, 
                  void *pxlAddr, size_t blkSize, struct fpConfig *pxlDescr,
                  double *expID, char *obsSetID)
{
    ...std status/param/input checks

    /* Validate the connection to supervisor
     */
    if (dcaValidateChannel (dhsID->super) == ERR)
	set error return, can't write to super


    format a SET_FPCONFIG message
    send mdConfig to the supervisor

    format a SET_EXPID message
    send expID to the supervisor

    format a SET_OBSSETID message
    send obsSetID to the supervisor

    format a WRITE_PIXEL message
    send blkAddr to the collector

    ...std return
}


dhsSendMetaData (long *status, char *response, dhsHandle dhsID,
                      void *blkAddr, size_t blkSize, struct mdConfig *mdDescr,
                      double *expID, char *obsSetID)
{
    ...std status/param/input checks

    /* Validate the connection to supervisor
     */
    if (dcaValidateChannel (dhsID->super) == ERR)
	set error return, can't write to super

    format a SET_MDCONFIG message
    send mdConfig to the supervisor

    format a SET_EXPID message
    send expID to the supervisor

    format a SET_OBSSETID message
    send obsSetID to the supervisor

    format a WRITE_META message
    send blkAddr to the collector

    ...std return
}




dhsSysClose (long *status, char *response, dhsHandle dhsID)
{
    ...std status/param/input checks

    close collector channel

    format and send a SYS_CLOSE message
    close supervisor channel

    free the struct

    ...std return
}


dhsCloseExp (long *status, char *response, dhsHandle dhsID, double expID)
{
    ...std status/param/input checks

    ...std return
}


dhsCloseConnect (long *status, char *response, dhsHandle dhsID)
{
    ...std status/param/input checks

    ...std return
}



-------------------------------------------------------------------------------



typedef long dhsHandle;

/* Focal-Plane configuration structure.
 */
typedef struct fpConfig_str { 
   ulong  xSize;   	/* size of a row on the focal plane (i.e. ncols)     */
   ulong  ySize;   	/* size of a column on the focal plane (i.e. oows)   */
   ulong  xStart;       /* (0-indexed?) first X pixel in this part of plane  */
   ulong  yStart;       /* (0-indexed?) first Y pixel in this part of plane  */
   long   dataType;     /* data type of the pixels (number of bytes)         */

 } fpConfig_t, *fpConfig_p, **fpConfig_s;


/* Meta-Data configuration structure.
 */
typedef struct mdConfig_str { 
   ulong metaType;                 /* conceptual type of the meta data */
   ulong numFields;                /* number of fields in the meta data array */
   ulong fieldSize[DHS_MAXFIELDS]; /* number of items in the field */
   ulong dataType[DHS_MAXFIELDS];  /* data type of the values in the field */
 } mdConfig_t, *mdConfig_p, **mdConfig_s;


--------------------------------------------------------------------------------


/* Super struct used to define default connection to supervisor.  Need a 
 * global struct so we can change it at runtime from MONSOON w/out restarting
 * process.
 */
struct Super {
   char *node;
   int   port;
} = { "super_node", 1234 };


/* DCAINITCHANNEL -- Initialize a channel to either the supervisor or a 
 * collector process.  If the requested channel is not already connected,
 * or the destination specification has changed since it was opened, we will
 * open a new connection here.  Otherwise, we verify the connection is still
 * working and simply reset counters,
 */
dcaInitChannel (dhsHandle *dhsID, int type)
{
  dhsChan *chan;


  if (type == DCA_SUPERVISOR) {

      if (dhsID->super == NULL)
          calloc a new channel structure
      else	 
          chan = dhsID->super

      if (chan->connected > 0) {
	  /* we're already connected to Supervisor, test connection by
	   * sending a NO-OP to get the ACK.
	   */
	  if ((status = dcaSend (chan, DCA_NOOP, NULL)) != DCA_ERR) { 
	      /* connection fine, just return. */
      	      chan->nerrs   = 0
      	      chan->nresend = 0
	      chan->connected = OK;
	      return
	  } else {
	      /* close current connection and try to reopen below */
	      dcaCloseChannel (chan);
	  }
      }

      /* Get a connection string of the for node:port for the channel */
      chan->device  = dcaGetSuperDev (dhsID)
      chan->node    = dcaDevNode (chan->device)
      chan->port    = dcaDevPort (chan->device)
      chan->nerrs   = 0
      chan->nresend = 0

      /* Open a socket to the Supervisor */
      if (dcaOpenChannel (chan)) > 0)
	  dhsID->nopen++;

      dhsID->super = chan

  } else if (type == DCA_COLLECTOR) {

      if (dhsID->super == NULL)
	  if (dcaInitChannel (dhsID, DCA_SUPERVISOR) == ERR)
	      set error return, can't connect to super

      if (dhsID->collector == NULL)
          calloc a new channel structure
      else
          chan = dhsID->collector

      if (chan->connected > 0) {
	  /* we're already connected to a collector */
	  if ((status = test connection by requesting an ACK) == alive) {
	      /* connection fine, just return. */
      	      chan->nerrs   = 0
      	      chan->nresend = 0
	      chan->connected = OK;
	      return OK
	  } else {
	      /* close current connection and try to reopen below */
	      dcaCloseChannel (chan);
	  }
      }

      /* Get a connection string of the for node:port for the channel */
      if ((chan->device = dcaGetDCADev (dhsID)) == NULL)
	  set error return, can't get collector device string

      chan->node    = dcaGetNode (chan->device)
      chan->port    = dcaGetPort (chan->device)
      chan->nerrs   = 0
      chan->nresend = 0

      /* Open a socket to the Collector */
      if (dcaOpenChannel (chan)) > 0)
	  dhsID->nopen++;

      dhsID->collector = chan
  }

  return (OK)
}


/* Get a device string for the DHS Supervisor.  Format of the string is
 *
 *   	<node_name> ':' <port_num>
 *
 * If connection defined in environment, use it, otherwise use default.
 */
dcaGetSuperDev (dhsID *dhsID)
{
  char *dev = NULL; 

  if ((dev = getenv (DHS_SUPERVISOR)) == NULL)
      /* No env setting so use the default we either started with, or
       * which was reset earlier somehow.
       */
      sprintf ((dev=malloc(SZ_LINE)), "%s:%d", Super.node, Super.port)

  /* Simply return here, may want to validate the form as well.  */	 
  return (dev)
}


/* Get a Collector device string from the Supervisor.
 */
dcaGetDCADev (dhsID *dhsID)
{
  char *dev = NULL; 

  if (dcaValidateChannel (dhsID->super) == ERR)
      return (NULL)

  /* Send a request for a collector device.
   */
  if (dev = dcaGet (dhsID->super, DCA_DCADEV)) == NULL)
	
}



/* Simply check whether the given channel is alive.  Sending a NO-OP will
 * either get an ACK and we return OK, or fail and we return ERR.
 */
dcaValidateChannel (chan *chan)
{
    return (dcaSend (chan, DCA_NOOP, NULL)) )
}
